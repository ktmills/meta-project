#!/usr/bin/env node

const usage = () => {
  console.log('Usage: meta-project-add <destFolder> <childRepoUrl> [defaultBranch]');
  process.exit(1);
};

const { argv } = process;
/^(-h||--help)$/.test(argv[2]) && usage();

const destArg = argv[2] === 'blank' ? argv[3] : argv[2];
const repoUrl = argv[3] === 'blank' ? argv[4] : argv[3];
const defaultBranch = argv[4] === 'blank' ? (argv[5] === 'blank' ? 'master' : argv[5]) : argv[4];

(destArg && repoUrl) || usage();

const path = require('path');
const { green, gray, cyan, inverse } = require('chalk');

// Load the ".meta" module.
const meta = require('get-meta-file')();
if (!meta) process.exit(1);

const metaPath = require('get-meta-file').getFileLocation();
const dest = path.relative(path.dirname(metaPath), path.resolve(destArg));
if (dest[0] === '.') {
  console.error(`ðŸ’¥ Projects cannot be outside the meta repo: ${cyan(dest)}`); // prettier-ignore
  process.exit(1);
}

const exec = require('meta-exec');
const fs = require('fs');
const mkdirp = require('mkdirp');
const tildify = require('tildify');

const destExists = fs.existsSync(dest);
if (!destExists) {
  mkdirp.sync(dest);
} else if (!fs.statSync(dest).isDirectory()) {
  console.log(`ðŸ’¥ '${dest}' is not a directory`);
  process.exit(1);
}

const gitExists = destExists && fs.existsSync(path.join(dest, '.git'));
if (meta.projects[dest] === repoUrl && meta.branches[dest] === defaultBranch && gitExists) {
  console.log(`${green('âœ“')} No changes required.`);
  process.exit(0);
}

process.chdir(dest);
gitInit(err => {
  if (err) throw err;

  if (!(dest in meta.projects)) {
    const gitIgnorePath = metaPath.replace(/.meta$/, '.gitignore');
    console.log(`Appending to ${cyan(tildify(gitIgnorePath))}`);
    fs.appendFileSync(gitIgnorePath, `/${dest}/\n`);
  }

  console.log(`Updating "projects" in ${cyan(tildify(metaPath))}`); // prettier-ignore
  if (!meta.projects) {
     meta.projects = {};
  }
  if (!meta.branches) {
     meta.branches = {};
  }
  meta.projects[dest] = repoUrl;
  meta.branches[dest] = defaultBranch;
  fs.writeFileSync(metaPath, JSON.stringify(meta, null, '  '));

  console.log(`\n${green('âœ“')} Project ${destExists ? 'updated' : 'added'}: ${green(dest)}`); // prettier-ignore
});

// Create a ".git" directory if none exists.
function gitInit(cb) {
  if (gitExists) {
    console.log(`Found pre-existing git repository`); // prettier-ignore
    return gitSetup(cb);
  }
  exec(
    {
      command: 'git init',
      suppressLogging: true,
    },
    err => {
      if (err) cb(err);
      else gitSetup(cb);
    }
  );
}

function gitSetup(cb) {
  console.log(`Updating origin to ${cyan(repoUrl)}`);
  exec(
    {
      command: `git remote remove origin; git remote add origin ${repoUrl}`,
      suppressLogging: true,
      stdio: 'ignore',
    },
    err => {
      if (err) return cb(err);
      if (destExists) {
        console.log(gray(`Skipping automatic "git pull" to be safe.`));
        return cb();
      }
      console.log(`Pulling from origin/${defaultBranch}...`);
      exec(
        {
          command: `git checkout -b ${defaultBranch}; git pull origin ${defaultBranch}`,
          suppressLogging: true,
          stdio: 'ignore',
        },
        cb
      );
    }
  );
}
